# -*- coding: utf-8 -*-
"""noise.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PXfSYGUin9d6p6Pxlx7O0wFMhYEwB8qq
"""

import numpy as np
import cv2 as cv
from matplotlib import pyplot as plt

from google.colab import files
from io import BytesIO
from PIL import Image

fname='naruto.png'
uploaded = files.upload()
im = Image.open(BytesIO(uploaded[fname]))

img = cv.imread(fname)
plt.imshow(img)
plt.show()
print(img.shape)

#salt-paper noise
c,h, w = img.shape
r=np.random.choice((0, 1, 2), size=(c,h, w),p=[0.9,0.05,0.05])

img_sp1=np.copy(img)
img_sp1[r==1]=255
img_sp1[r==2]=0
fig = plt.figure(figsize=(10, 10))
plt.subplot(121)
plt.title("Original Image "),plt.imshow(img)
plt.subplot(122)
plt.imshow(img_sp1),plt.title('After adding salt and pepper noise:')
plt.show()

# Uniform Noise
r=np.random.choice((0,5,12,10,13,14), size=(c,h, w))
a=10
b=14
img_sp2=np.copy(img)

for x in r:
  for y in x:
    for z in y:
     if (z>=a or z<=b):
         z=1/b-a
     else:
        z=0
output=img_sp2+r

fig = plt.figure(figsize=(15, 15))
plt.subplot(121)
plt.title("Original Image "),plt.imshow(img)
plt.subplot(122)
plt.imshow(output),plt.title('After adding uniform noise:')
plt.show()

#Exponential Noise
import math
c,h,w = img.shape
r=np.random.choice((-20,-10,-15,0,10,6,7), size=(c,h, w))

a=10
img_sp3=np.copy(img)

for x in r:
  for y in x:
    for z in y:
     if (z>=0):
         z=a*math.exp(-a*z)
     else:
        z=0
output1=img_sp3+r

fig = plt.figure(figsize=(15, 15))
plt.subplot(121)
plt.title("Original Image "),plt.imshow(img)
plt.subplot(122)
plt.imshow(output1),plt.title('After adding exponential noise:')
plt.show()

#Gamma Noise
import math
c,h,w = img.shape
r=np.random.choice((-20,10,11,8,6,0,10), size=(c,h, w))

a=10
b=8
img_sp4=np.copy(img)

for x in r:
  for y in x:
    for z in y:
     if (z>=0):
         z=a**b * z**(b-1) * math.exp(-a*z)/math.factorial(b-1)
     else:
        z=0
output2=img_sp4+r
fig = plt.figure(figsize=(15, 15))
plt.subplot(121)
plt.title("Original Image "),plt.imshow(img)
plt.subplot(122)
plt.imshow(output2),plt.title('After adding Gamma noise:')
plt.show()

#Rayleigh noise
import math
c,h,w = img.shape
r=np.random.choice((10,11,8,16,0,10), size=(c,h, w))

a=10
b=8
img_sp5=np.copy(img)

for x in r:
  for y in x:
    for z in y:
     if (z>=a):
         z=2*(z-a)*math.exp(-((z-a)**2)/b)/b
     else:
        z=0
output3=img_sp5+r
fig = plt.figure(figsize=(15, 15))
plt.subplot(121)
plt.title("Original Image "),plt.imshow(img)
plt.subplot(122)
plt.imshow(output3),plt.title('After adding Rayleigh noise:')
plt.show()

# Gaussian Noise
import numpy as np
img_sp5=np.copy(img)
mean = 1.0   
std = 1.2 
r=np.random.normal(mean, std, img_sp5.shape)
r=r.reshape(c,h,w)
output4 = img_sp5 + r
fig = plt.figure(figsize=(20, 20))
plt.subplot(121)
plt.title("Original Image "),plt.imshow(img)
plt.subplot(122)
plt.imshow(output4),plt.title('After adding Gaussian noise:')
plt.show()